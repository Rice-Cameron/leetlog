name: Quality Gate

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: leetlog_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: 🔍 Lint Check
      id: lint
      run: |
        echo "::group::ESLint"
        npm run lint
        echo "::endgroup::"
        echo "✅ Linting passed"

    - name: 🧪 Test Database Setup
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
        DATABASE_URL_TEST: ${{ secrets.DATABASE_URL_TEST }}
        DATABASE_MODE: 3
        NODE_ENV: test
      run: |
        echo "::group::Database Setup"
        npm run test:db
        echo "::endgroup::"
        echo "✅ Test database ready"

    - name: 🧪 Run Tests
      id: test
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
        DATABASE_URL_TEST: ${{ secrets.DATABASE_URL_TEST }}
        DATABASE_MODE: 3
        NODE_ENV: test
      run: |
        echo "::group::Test Suite"
        npm run test:run
        echo "::endgroup::"
        echo "✅ All tests passed"

    - name: 🏗️ Production Build
      id: build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL_DEV }}
        DATABASE_URL_DEV: ${{ secrets.DATABASE_URL_DEV }}
        DATABASE_MODE: 1
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_dummy_key_for_build
        CLERK_SECRET_KEY: sk_test_dummy_key_for_build
        CLERK_WEBHOOK_SECRET: whsec_dummy_webhook_secret_for_build
      run: |
        echo "::group::Production Build"
        npm run build
        echo "::endgroup::"
        echo "✅ Production build successful"

    - name: 🛡️ Database Safety Check
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
        DATABASE_URL_TEST: ${{ secrets.DATABASE_URL_TEST }}
        DATABASE_MODE: 3
        NODE_ENV: test
      run: |
        echo "::group::Database Safety"
        npm run test-db-mode
        echo "::endgroup::"
        echo "✅ Database safety verified"

    - name: 📊 Quality Summary
      if: always()
      run: |
        echo "## 🎯 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 ESLint | ${{ steps.lint.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ${{ steps.test.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY  
        echo "| 🏗️ Build | ${{ steps.build.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.lint.outcome }}" == "success" && "${{ steps.test.outcome }}" == "success" && "${{ steps.build.outcome }}" == "success" ]]; then
          echo "🎉 **All quality checks passed!** This PR is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Some quality checks failed.** Please review the errors above." >> $GITHUB_STEP_SUMMARY
        fi